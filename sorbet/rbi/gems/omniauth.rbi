# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/omniauth/all/omniauth.rbi
#
# omniauth-1.9.0
module OmniAuth
  def self.config; end
  def self.configure; end
  def self.logger; end
  def self.mock_auth_for(provider); end
  def self.strategies; end
end
class OmniAuth::Error < StandardError
end
module OmniAuth::Strategies
end
class OmniAuth::Configuration
  def add_camelization(name, camelized); end
  def add_mock(provider, original = nil); end
  def allowed_request_methods; end
  def allowed_request_methods=(arg0); end
  def before_callback_phase(&block); end
  def before_callback_phase=(arg0); end
  def before_options_phase(&block); end
  def before_options_phase=(arg0); end
  def before_request_phase(&block); end
  def before_request_phase=(arg0); end
  def camelizations; end
  def camelizations=(arg0); end
  def failure_raise_out_environments; end
  def failure_raise_out_environments=(arg0); end
  def form_css; end
  def form_css=(arg0); end
  def full_host; end
  def full_host=(arg0); end
  def initialize; end
  def logger; end
  def logger=(arg0); end
  def mock_auth; end
  def mock_auth=(arg0); end
  def on_failure(&block); end
  def on_failure=(arg0); end
  def path_prefix; end
  def path_prefix=(arg0); end
  def self.allocate; end
  def self.default_logger; end
  def self.defaults; end
  def self.instance; end
  def self.new(*arg0); end
  def test_mode; end
  def test_mode=(arg0); end
  extend Singleton::SingletonClassMethods
  include Singleton
end
module OmniAuth::Utils
  def camelize(word, first_letter_in_uppercase = nil); end
  def deep_merge(hash, other_hash); end
  def form_css; end
  def self.camelize(word, first_letter_in_uppercase = nil); end
  def self.deep_merge(hash, other_hash); end
  def self.form_css; end
end
